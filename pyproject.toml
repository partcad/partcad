
[tool.pytest.ini_options]
pythonpath = "partcad/src"
addopts = """
    --alluredir=allure-results
    --cov-report=html:pytest-results/htmlcov
    --cov-report=xml:pytest-results/coverage.xml
    --cov=partcad
    --durations-min=1.0
    --durations=0
    --html=pytest-results/report.html
    --junitxml=pytest-results/junit.xml
    --log-cli-level=DEBUG
    --self-contained-html
    """
filterwarnings = [
    "ignore:.*is a deprecated alias for.*:DeprecationWarning"
]

[tool.black]
line-length = 120
target-version = ['py310']

[tool.flake8]
exclude = ".venv"
extend-ignore = "E203"
max-line-length = 120

[tool.pylint."messages control"]
ignore = ["setup.py", "__init__.py"]
disable = "all"
enable = [
  "empty-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring"
]

[tool.isort]
profile = "black"
known_first_party = ["partcad"]

[tools.pyright]
reportMissingTypeArgument = true  # Report generic classes used without type arguments
strictListInference = true  # Use union types when inferring types of lists elements, instead of Any

# export POETRY_MULTIPROJECT_CHECK_DIR="/tmp/.check_partcad-dev"
# export POETRY_MULTIPROJECT_PREPARE_DIR="/tmp/.prepare_partcad-dev"

[tool.poetry.plugins."poetry-multiproject-plugin"]
cache-dir = "/tmp/.prepare_partcad-dev"

[tool.poetry]
name = "partcad-dev"
version = "0.7.97"
description = "Development Environment for PartCAD"
authors = [
  "PartCAD <support@partcad.org>",
]
license = "Apache 2.0"
readme = "README.md"
packages = [
  { include = "partcad", from = "partcad/src" },
  { include = "partcad_cli", from = "partcad-cli/src" }
]

[tool.poetry.scripts]
pc = 'partcad_cli.click.command:cli'
partcad = 'partcad_cli.click.command:cli'

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
poetry-plugin-shell = "^1.0.1"

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
flake8 = "^7.1.1"
isort = "^5.13.2"
sentry-sdk = {extras = ["opentelemetry"], version = "^2.20.0"}
poetry-plugin-shell = "^1.0.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-html = "^4.1.1"
pytest-durations = "^1.3.1"
allure-pytest = "^2.13.5"
coverage = "^7.6.8"
behave = "^1.2.6"
behavex = "^4.0.8"
allure-behave = "^2.13.5"
pytest-xdist = "^3.6.1"
pyhamcrest = "^2.1.0"
strip-ansi = "^0.1.1"
nox = "^2024.10.9"
nox-poetry = "^1.0.3"

[tool.poetry.group.docs.dependencies]
sphinx = "^8.1.3"
sphinx-rtd-theme = "^3.0.2"
docutils = "^0.21.2"
readthedocs-sphinx-search = "^0.3.2"
sphinx-autodoc-typehints = "3.0.1"
sphinx-copybutton = "^0.5.2"
sphinx-hoverxref = "^1.4.2"
sphinx-design = "^0.6.1"
mkdocs-material = "^9.6.0"
mdx-truly-sane-lists = "^1.3"
sphinx-autobuild = "^2024.10.3"

[tool.poetry.group.partcad.dependencies]
cadquery-ocp = "7.7.2"
build123d = "0.8.0"
pyyaml = ">=6.0.1"
gitpython = ">=3.1.40"
ruamel-yaml = ">=0.18.5"
vyper-config = "^1.2.1"
packaging = ">=23.1"
setuptools = "^75.6.0"
jinja2 = "^3.1.4"
requests = "^2.32.3"
aiofiles = "^24.1.0"
aiohttp = "^3.11.7"
google-generativeai = "^0.8.3"
pillow = "^11.0.0"
openai = "^1.55.1"
ollama = "^0.4.1"
async-lru = "^2.0.4"

[tool.poetry.group.cli.dependencies]
setuptools = "^75.5.0"
jinja2 = "^3.1.4"
requests = "^2.32.3"
aiofiles = "^24.1.0"
aiohttp = "^3.11.2"
google-generativeai = "^0.8.3"
pillow = "^11.0.0"
openai = "^1.54.4"
ollama = "^0.4.1"
renderlab = "^0.1.20230421184216"
rlpycairo = "^0.3.0"
svglib = "^1.5.1"
ocp-vscode = "^2.6.1"
coloredlogs = "^15.0.1"
click = "^8.1.7"
rich-click = "^1.8.4"

[tool.poetry.group.performance.dependencies]
snakeviz = "^2.2.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
