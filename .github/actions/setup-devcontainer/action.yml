name: Setup devcontainer
description: Get the temporary image name and prepare the config for it

outputs:
  IMAGE_TAG:
    description: "The tag of the container in 'devcontainer.json' (the next patch version)"
    value: ${{ steps.tag.outputs.IMAGE_TAG }}
  PUBLISH_IMAGE_TAG:
    description: "The tag of the ephemeral container version for this branch only (if different from IMAGE_TAG)"
    value: ${{ steps.tag.outputs.PUBLISH_IMAGE_TAG }}
  BUILD_DEVCONTAINER:
    description: "Whether the ephemeral container needs to be built or not."
    value: ${{ steps.tag1.outputs.BUILD_DEVCONTAINER || 'false' }}

runs:
  using: composite
  steps:
    - name: Extract branch name
      id: extract_branch
      shell: bash -l {0}
      run: |
        echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

    - name: Check for changes that require the container to be rebuilt
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          devcontainer:
            - .devcontainer/*

    - name: On 'devel' and the devcontainer needs to be rebuilt
      id: tag
      shell: bash -l {0}
      env:
        BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      run: |
        # The version tag is about to get bumped. Let's predict the next version.
        # TODO(clairbee): detect major and minor version updates
        export IMAGE_TAG=$(echo "${{ env.VERSION }}" | awk -F '.' '{print $1"."$2"."($3 + 1)}')
        if [ "${{ env.BRANCH }}" == "devel" || "${{ env.BRANCH }}" == "main" ]; then
          export PUBLISH_IMAGE_TAG="$IMAGE_TAG"
        else
          export PUBLISH_IMAGE_TAG="${{ env.VERSION }}-${{ env.BRANCH }}"
        fi
        echo "IMAGE_TAG=$IMAGE_TAG"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "PUBLISH_IMAGE_TAG=$PUBLISH_IMAGE_TAG"
        echo "PUBLISH_IMAGE_TAG=$PUBLISH_IMAGE_TAG" >> $GITHUB_ENV
        echo "PUBLISH_IMAGE_TAG=$PUBLISH_IMAGE_TAG" >> $GITHUB_OUTPUT

        # Remember to build the container
        echo "BUILD_DEVCONTAINER=true" >> $GITHUB_OUTPUT

        # # Make sure the 'devcontainer.json' is up-to-date
        # if ! jq -e . .devcontainer/devcontainer.json > /dev/null 2>&1; then
        #   echo "Error: Invalid JSON in devcontainer.json"
        #   exit 1
        # fi

        if ! sed 's/\/\/.*$//' .devcontainer/devcontainer.json | \
           grep "\\S" | \
           yq .image | \
           grep -q "$IMAGE_TAG"; then
          echo "Error: Target devcontainer version $IMAGE_TAG not found in devcontainer.json"
          exit 1
        fi

    - name: Prepare the container config
      shell: bash -l {0}
      env:
        IMAGE_TAG: ${{ steps.tag.outputs.IMAGE_TAG }}
        PUBLISH_IMAGE_TAG: ${{ steps.tag.outputs.PUBLISH_IMAGE_TAG }}
      run: |
        echo "Replacing devcontainer:${{ env.IMAGE_TAG }} with devcontainer:${{ env.PUBLISH_IMAGE_TAG }} in .devcontainer/devcontainer.json"
        sed "s|devcontainer:${{ env.IMAGE_TAG }}|devcontainer:${{ env.PUBLISH_IMAGE_TAG }}|g" < .devcontainer/devcontainer.json > .devcontainer/.devcontainer.json
