name: "Setup devcontainer"
description: "Get the temporary image name and prepare the config for it"

# What are the environment variables defined here?
# IMAGE_TAG: the version of the container in 'devcontainer.json' (the next patch version)
# PUBLISHED_IMAGE_TAG: the name of the ephemeral container version for this branch only (if different from IMAGE_TAG)
# BUILD_DEVCONTAINER: whether the ephemeral container needs to be built

runs:
  using: "composite"
  outputs:
    IMAGE_TAG: ${{ steps.tag.outputs.IMAGE_TAG }}
    PUBLISH_IMAGE_TAG: ${{ steps.tag.outputs.PUBLISH_IMAGE_TAG }}
    BUILD_DEVCONTAINER: ${{ steps.tag1.outputs.BUILD_DEVCONTAINER }}
  steps:
    - name: Extract branch name
      id: extract_branch
      shell: bash -l {0}
      run: echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

    - name: Check for changes that require the container to be rebuilt
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          devcontainer:
            - .devcontainer/*

    - name: On 'devel' and the devcontainer needs to be rebuilt
      id: tag1
      if: steps.changes.outputs.devcontainer == 'true' && steps.extract_branch.outputs.BRANCH == 'devel'
      shell: bash -l {0}
      run: |
        # The version tag is about to get bumped. Let's predict the next version.
        # TODO(clairbee): detect major and minor version updates
        IMAGE_TAG=$(echo "${{ env.VERSION }}" | awk -F '.' '{print $1"."$2"."($3 + 1)}')
        if [ "${{ steps.extract_branch.outputs.BRANCH }}" == "devel" ]; then
          export PUBLISH_IMAGE_TAG=$IMAGE_TAG
        else
          export PUBLISH_IMAGE_TAG="${{ env.VERSION }}-${{ steps.extract_branch.outputs.BRANCH }}"
        fi
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "PUBLISH_IMAGE_TAG=$PUBLISH_IMAGE_TAG" >> $GITHUB_ENV
        echo "PUBLISH_IMAGE_TAG=$PUBLISH_IMAGE_TAG" >> $GITHUB_OUTPUT

        # Remember to build the container
        echo "BUILD_DEVCONTAINER=true" >> $GITHUB_OUTPUT

        # Make sure the 'devcontainer.json' is up-to-date
        if ! jq -e . .devcontainer/devcontainer.json > /dev/null 2>&1; then
          echo "Error: Invalid JSON in devcontainer.json"
          exit 1
        fi

        if ! sed 's/\/\/.*$//' .devcontainer/devcontainer.json | \
           grep "\\S" | \
           jq .image | \
           grep -q "$IMAGE_TAG"; then
          echo "Error: Target devcontainer version $IMAGE_TAG not found in devcontainer.json"
          exit 1
        fi

    - name: The devcontainer does not need to be rebuilt
      if: steps.changes.outputs.devcontainer != 'true' || steps.extract_branch.outputs.branch != 'devel'
      id: tag2
      shell: bash -l {0}
      run: |
        # Just use the referenced container
        IMAGE_TAG="$(sed 's/\/\/.*$//' .devcontainer/devcontainer.json | grep "\\S" | yq .build.cacheFrom[0] | awk -F: '{print $2}')"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "PUBLISH_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "PUBLISH_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Consolidate tag names
      id: tag
      shell: bash -l {0}
      run: |
        echo "IMAGE_TAG=${{ steps.tag1.outputs.IMAGE_TAG || steps.tag2.outputs.IMAGE_TAG }}" >> $GITHUB_OUTPUT
        echo "PUBLISH_IMAGE_TAG=${{ steps.tag1.outputs.PUBLISH_IMAGE_TAG || steps.tag2.outputs.PUBLISH_IMAGE_TAG }}" >> $GITHUB_OUTPUT

    - name: Prepare the container config
      shell: bash -l {0}
      run: |
        echo "Replacing devcontainer:${{ steps.tag.outputs.IMAGE_TAG }} with devcontainer:${{ steps.tag.outputs.PUBLISH_IMAGE_TAG }} in .devcontainer/devcontainer.json"
        sed "s|devcontainer:${{ steps.tag.outputs.IMAGE_TAG }}|devcontainer:${{ steps.tag.outputs.PUBLISH_IMAGE_TAG }}|g" < .devcontainer/devcontainer.json > .devcontainer/.devcontainer.json
