name: "Setup all"
description: "Prepare the runner no matter what the job is"

inputs:
  job:
    description: "The name of the job calling this action"
    default: "default"
  preheat_only:
    description: "Only preheat the cache"
    default: "false"

runs:
  using: "composite"
  steps:
    ############################################## OS PREREQUISITES ################################################
    - uses: awalsh128/cache-apt-pkgs-action@latest
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      with:
        packages: |
          nodejs npm
          libtiff5-dev libjpeg-dev libopenjp2-7-dev zlib1g-dev
          libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev
          python3-tk libharfbuzz-dev libfribidi-dev libxcb1-dev
          libxml2-dev libxslt-dev
          libcairo2-dev pkg-config python3-dev
        version: 1.0

    # # TODO(clairbee): minimize these pre-requisites by moving the VSCode build job away from the test workflow (ci.yml)
    # - name: Install prerequisites
    #   if: ${{ startsWith(matrix.os, 'ubuntu') }}
    #   shell: bash -el {0}
    #   run: |
    #     sudo apt-get -q update || exit 1
    #     sudo apt-get -q install -y \
    #       nodejs npm \
    #       libtiff5-dev libjpeg-dev libopenjp2-7-dev zlib1g-dev \
    #       libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev \
    #       python3-tk libharfbuzz-dev libfribidi-dev libxcb1-dev \
    #       libxml2-dev libxslt-dev \
    #       libcairo2-dev pkg-config python3-dev \
    #         || exit 1

    - name: Install prerequisites
      if: ${{ startsWith(matrix.os, 'macos') }}
      shell: bash -el {0}
      run: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew install jpeg

    # Cache for vspkg
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install prerequisites
      if: ${{ startsWith(matrix.os, 'windows') }}
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      shell: bash -el {0}
      run: |
        vcpkg.exe install zlib
    #     vcpkg.exe install pkgconf
    #     vcpkg.exe install freetype
    #     vcpkg.exe install cairo
    #     choco uninstall StrawberryPerl -y
    #     # choco install pkgconfiglite
    #     choco install pacman
    #     pacman -Sy pkgconf

    ###################################################  PYTHON  ###################################################

    # Miniconda
    - name: Cache conda
      id: conda_cache
      uses: actions/cache@v4
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 4
      with:
        enableCrossOsArchive: true
        path: ${{ runner.os == 'Windows' && format('D:\conda_pkgs_dir_{0}', matrix.python-version) || format('~/conda_pkgs_dir_{0}', matrix.python-version) }}
        key: ${{ matrix.os }}-partcad-conda-${{ env.CACHE_NUMBER }}

    # TODO(clairbee): Cache the conda environment?

    - uses: actions/cache@v4
      id: pip_cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('{partcad/requirements.txt,partcad/requirements-dev.in,partcad-ide-vscode/src/test/python_tests/requirements.txt}') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: conda-incubator/setup-miniconda@v3
      if: ${{ inputs.preheat_only != 'true' || steps.conda_cache.outputs.cache-hit != 'true' || steps.pip_cache.outputs.cache-hit != 'true' }}
      continue-on-error: true # Usually it fails while setting up the unwanted 'test' environment
      with:
        miniforge-version: 24.11.3-0
        use-mamba: true
        channels: conda-forge,defaults
        python-version: ${{ matrix.python-version }}
        activate-environment: test
        auto-activate-base: false
        # auto-update-conda: true
        use-only-tar-bz2: true
        pkgs-dirs: ${{ runner.os == 'Windows' && format('D:\conda_pkgs_dir_{0}', matrix.python-version) || format('~/conda_pkgs_dir_{0}', matrix.python-version) }}

    # - uses: mamba-org/setup-micromamba@v2
    #   with:
    #     micromamba-version: 2.0.5-0
    #     # environment-file: environment.yml
    #     init-shell: >-
    #       bash
    #       powershell
    #     # cache-environment: true
    #     post-cleanup: "all"

    - name: Init conda
      if: ${{ inputs.preheat_only != 'true' || steps.conda_cache.outputs.cache-hit != 'true' || steps.pip_cache.outputs.cache-hit != 'true' }}
      shell: bash -el {0}
      run: |
        [[ -f ~/.bashrc ]] || touch ~/.bashrc
        [[ -f ~/.bash_profile ]] || touch ~/.bash_profile
        . ~/.bashrc
        . ~/.bash_profile
        # conda clean --all
        conda info --envs
        # Sometimes in GitHub workflows, the test environment is not created from the first attempt due to networking issues
        mamba init || (rm -rf ~/miniconda3/envs/test && mamba create -y -n test && mamba init)

    # Install dev dependencies
    - name: install dev dependencies
      if: ${{ inputs.preheat_only != 'true' || steps.conda_cache.outputs.cache-hit != 'true' || steps.pip_cache.outputs.cache-hit != 'true' }}
      shell: bash -el {0}
      env:
        ENV_PATH: ~/${{ format('env-test-{0}-{1}', inputs.job, matrix.python-version) }}
      run: |
        . ~/.bashrc
        . ~/.bash_profile
        # conda clean --all
        # conda clean -y -i
        mamba create -y -p $ENV_PATH libffi-dev python=${{ matrix.python-version }}
        mamba activate $ENV_PATH
        # mamba install -y -p $ENV_PATH libffi-dev
        echo "Running ensurepip"
        python -m ensurepip --upgrade || echo "ensurepip failes on Windows sometimes"
        echo "Running pip"
        python -m pip install --upgrade pip wheel mypy setuptools
        # Install all core and a subset of CLI dependencies, that are required for tests
        python -m pip install --upgrade -r partcad/requirements.txt
        python -m pip install --upgrade -r partcad/requirements-dev.in
        python -m pip install --upgrade -r partcad-ide-vscode/src/test/python_tests/requirements.txt
        mamba deactivate

        # echo "PC_INTERNAL_STATE_DIR=$(mktemp -d)" >> $GITHUB_ENV

    # - name: Update Homebrew
    #   if: matrix.os == 'macos-latest'
    #   shell: bash
    #   run: |
    #     brew update --preinstall
    #     # cat "$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/nlopt.rb" > .github/brew-formulae
    # # - name: Configure Homebrew cache
    # #   if: matrix.os == 'macos-latest'
    # #   uses: actions/cache@v2
    # #   with:
    # #     path: |
    # #       ~/Library/Caches/Homebrew/nlopt--*
    # #       ~/Library/Caches/Homebrew/downloads/*--nlopt-*
    # #     key: brew-${{ hashFiles('.github/brew-formulae') }}
    # #     restore-keys: brew-
    # - name: Install Homebrew dependencies
    #   if: matrix.os == 'macos-latest'
    #   shell: bash
    #   run: |
    #     # env HOMEBREW_NO_AUTO_UPDATE=1 brew install nlopt
    #     HOMEBREW_NO_AUTO_UPDATE=1 brew install gcc
    #     HOMEBREW_NO_AUTO_UPDATE=1 brew install nlopt
