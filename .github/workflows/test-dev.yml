# https://github.com/devcontainers/ci/blob/main/docs/github-action.md
name: CI-Dev
on:
  workflow_dispatch:
  # schedule:
  #   # https://crontab.guru/#0_8_*_*_*
  #   # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule
  #   - cron: "0 8 * * *" # Run daily at PST midnight
  merge_group:
  pull_request:
    branches: ["main", "devel"]
  push:
    branches: ["main", "devel"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  VERSION: 0.7.112
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-devcontainer
  TOTAL_TIMEOUT: 900
  INSTALL_TIMEOUT: 300

jobs:
  devcontainer:
    name: "Build: Dev Container"
    # TODO(clairbee): Verify how the build works for the bumpversion commit
    # if: ${{ !startsWith(github.event.head_commit.message, 'Version updated') }}
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
      contents: read
      packages: write
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Setup Dev Container
        id: setup
        uses: ./.github/actions/setup-devcontainer

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Dev Container
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
          imageTag: ${{ steps.setup.outputs.IMAGE_TAG }}
          configFile: .devcontainer/devcontainer-build.json
          push: always

  poetry-install:
    name: "Run: poetry install"
    needs: devcontainer
    permissions:
      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
      contents: read
      packages: read
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Setup Dev Container
        id: setup
        uses: ./.github/actions/setup-devcontainer

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Python Environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: "Run: poetry install"
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.IMAGE_TAG }}"
          configFile: .devcontainer/.devcontainer.json
          push: never
          runCmd: |
            start_time=$SECONDS
            for i in {1..3}; do
              if [ $((SECONDS - start_time)) -gt ${{ env.TOTAL_TIMEOUT }} ]; then
                echo "Total timeout of ${{ env.TOTAL_TIMEOUT }}s exceeded"
                exit 1
              fi
              echo "Attempt $i/3: Installing dependencies (timeout: ${{ env.INSTALL_TIMEOUT }})..."
              if timeout ${{ env.INSTALL_TIMEOUT }} poetry --no-ansi --no-interaction install; then
                echo "Installation successful on attempt $i"
                exit 0
              fi
              echo "Attempt $i failed. Waiting $((i * 10)) seconds before retry..."
              sleep $((i * 10))  # Exponential backoff
            done
            echo "All installation attempts failed after 3 tries"
            exit 1

  pytest:
    name: "Run: pytest"
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    needs: poetry-install
    permissions:
      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
      contents: read
      packages: read
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Setup Dev Container
        id: setup
        uses: ./.github/actions/setup-devcontainer

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Python Environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          # TODO: @alexanderilyin: Consider including devcontainer.json in the hash
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Run PyTest
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.IMAGE_TAG }}"
          configFile: .devcontainer/.devcontainer.json
          push: never
          runCmd: |
            (cd partcad-ide-vscode && poetry run nox --session setup && poetry run nox --session build_package)

            # TODO: Consider using common top level directory for all artifacts: 'output/$TOOL/...'
            mkdir -pv pytest-results
            poetry --no-ansi --no-interaction show --tree
            poetry --no-ansi --no-interaction run python -m pytest -x -p no:error-for-skips -p no:warnings  --ignore-glob="openscad*" --ignore-glob="partcad-ide-vscode/bundled" --dist no --verbose --color=no
            echo DONE

      - name: Upload test results & coverage reports to github and codecov
        if: always()
        uses: ./.github/actions/upload-test-results
        with:
          name: pytest-results
          path: pytest-results/
          retention-days: 7
          status: ${{ job.status }}
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov-files: pytest-results/junit.xml
          coverage-report: pytest-results/coverage.xml

      - name: Generate Allure Report
        if: always()
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.IMAGE_TAG }}"
          configFile: .devcontainer/.devcontainer.json
          push: never
          runCmd: |
            if [ ! -d "allure-results" ]; then
              echo "##[warning]allure-results directory not found. Skipping report generation."
              exit 0
            fi
            if ! allure generate --config .devcontainer/allure.yml allure-results -o allure-report; then
              echo "##[warning]Allure report generation failed. This won't fail the build, but please investigate."
            fi

      - name: Publish Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-allure-report
          path: allure-report/
          retention-days: 7

  # pre-commit:
  #   name: "Run: pre-commit"
  #   needs: devcontainer
  #   runs-on: ubuntu-24.04
  #   timeout-minutes: 10
  #   steps:
  #     - name: Checkout (GitHub)
  #       uses: actions/checkout@v4
  #     - name: Setup Dev Container
  #       id: setup
  #       uses: ./.github/actions/setup-devcontainer

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.CONTAINER_REGISTRY }}
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Cache pre-commit dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           .pre-commit
  #         key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pre-commit-
  #     - name: Run pre-commit hooks
  #       uses: devcontainers/ci@v0.3
  #       with:
  #         imageName: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.IMAGE_TAG }}"
  #         cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{env.IMAGE_NAME }}:${{ env.VERSION }}"
  #         configFile: .devcontainer/.devcontainer.json
  #         push: never
  #         # TODO-24: Add custom @dependabot-like job to open PR to update dependencies
  #         # TODO: Run ggshield and/or other secrets scanning tools as separate job
  #         env: |
  #           SKIP=poetry-export,poetry-lock,ggshield
  #         runCmd:
  #           pre-commit run --config .devcontainer/.pre-commit-config.yaml --show-diff-on-failure --color=always
  #           --all-files

  behave:
    name: "Run: behave"
    runs-on: ubuntu-24.04

    timeout-minutes: 30

    needs: poetry-install
    permissions:
      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
      contents: read
      packages: read
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Setup Dev Container
        id: setup
        uses: ./.github/actions/setup-devcontainer

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Python Environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # For Windows only, use PowerShell to set the SSH agent service in the manual launch mode
      - name: Set SSH Agent Service to Manual
        if: runner.os == 'Windows'
        run: Set-Service -Name ssh-agent -StartupType Manual
        shell: pwsh

      - name: Start SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_RO }}

      - name: Run Behave
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.IMAGE_TAG }}"
          configFile: .devcontainer/.devcontainer.json
          push: never
          env: |
            # TODO-25: Workaround for "Host key verification failed."
            GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

          runCmd: |
            # TODO-26: PC-186: Allow to configure git clone protocol in settings
            git config --global url."git@github.com:".insteadOf "https://github.com/"
            git config --global protocol.version 2
            mkdir -pv behave-results
            poetry --no-ansi --no-interaction run coverage run $(poetry run which behave)
            poetry --no-ansi --no-interaction run coverage xml --data-file=./.coverage -o behave-results/coverage.xml

      - name: Upload test results & coverage reports to github and codecov
        if: always()
        uses: ./.github/actions/upload-test-results
        with:
          name: behave-results
          path: behave-results/
          retention-days: 7
          status: ${{ job.status }}
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov-files: behave-results/junit.xml
          coverage-report: behave-results/coverage.xml

      - name: Generate Allure Report
        if: always()
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.IMAGE_TAG }}"
          configFile: .devcontainer/.devcontainer.json
          push: never
          runCmd: |
            if [ ! -d "allure-results" ]; then
              echo "##[warning]allure-results directory not found. Skipping report generation."
              exit 0
            fi
            if ! allure generate --config .devcontainer/allure.yml allure-results -o allure-report; then
              echo "##[warning]Allure report generation failed. This won't fail the build, but please investigate."
            fi

      - name: Publish Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: behave-allure-report
          path: allure-report/
          retention-days: 7

  # nox:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # NOTE: OS below is the one which runs the container, not the one inside the container
  #       # TODO: @alexanderilyin: Add more OSes via https://github.com/partcad/devcontainers-templates
  #       os: [ubuntu-24.04]
  #       python-version:
  #         # TODO: Enable 3.10 when pytest job is deprecated
  #         # - "3.10"
  #         - "3.11"
  #         - "3.12"
  #   name: "Run: nox"
  #   runs-on: ${{ matrix.os }}
  #   timeout-minutes: 10
  #   needs: poetry-install
  #   permissions:
  #     # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
  #     contents: read
  #     packages: read
  #   steps:
  #     - name: Checkout (GitHub)
  #       uses: actions/checkout@v4
  #     - name: Setup Dev Container
  #       id: setup
  #       uses: ./.github/actions/setup-devcontainer

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.CONTAINER_REGISTRY }}
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # - name: Cache Python Environment
  #     #   uses: actions/cache@v4
  #     #   with:
  #     #     path: |
  #     #       ~/.cache/pypoetry
  #     #       .venv
  #     #     # TODO: @alexanderilyin: Consider including devcontainer.json in the hash
  #     #     key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-poetry-

  #     # TODO: @alexanderilyin Add caching for: "Creating virtual environment (virtualenv) using python3.11 in .nox/pytest-3-11"

  #     - name: Run Nox
  #       uses: devcontainers/ci@v0.3
  #       with:
  #         imageName: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.IMAGE_TAG }}"
  #         # cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.PUBLISH_IMAGE_TAG }}"
  #         # configFile: .devcontainer/.devcontainer.json
  #         push: never
  #         runCmd: |
  #           poetry --no-ansi --no-interaction run nox --noxfile dev-tools/noxfile.py --python ${{ matrix.python-version }}

  #     # - name: Generate Allure Report
  #     #   if: always()
  #     #   uses: devcontainers/ci@v0.3
  #     #   with:
  #     #     cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PUBLISH_IMAGE_TAG }}"
  #     #     configFile: .devcontainer/.devcontainer.json
  #     #     push: never
  #     #     runCmd: |
  #     #       if [ ! -d "allure-results" ]; then
  #     #         echo "##[warning]allure-results directory not found. Skipping report generation."
  #     #         exit 0
  #     #       fi
  #     #       if ! allure generate --config .devcontainer/allure.ymlallure-results -o allure-report; then
  #     #         echo "##[warning]Allure report generation failed. This won't fail the build, but please investigate."
  #     #       fi

  #     # - name: Publish Allure Report
  #     #   if: always()
  #     #   uses: actions/upload-artifact@v4
  #     #   with:
  #     #     name: pytest-allure-report
  #     #     path: allure-report/
  #     #     retention-days: 7

  integration-tests:
    # if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    name: "Run: pc"
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs: poetry-install
    permissions:
      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
      contents: read
      packages: read
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Setup Dev Container
        id: setup
        uses: ./.github/actions/setup-devcontainer

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Python Environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          # TODO: @alexanderilyin: Consider including devcontainer.json in the hash
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Run Acceptance Tests
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom: "${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.setup.outputs.IMAGE_TAG }}"
          configFile: .devcontainer/.devcontainer.json
          push: never
          runCmd: |
            mkdir -pv pc-test-results
            poetry --no-ansi --no-interaction show --tree
            # TODO: Use similar 'coverage run' in behave steps when calling pc
            poetry --no-ansi --no-interaction run sh -c "(cd examples && coverage run $(poetry run which pc) --no-ansi list all -r //pub/examples)"
            poetry --no-ansi --no-interaction run sh -c "(cd examples && coverage run $(poetry run which pc) --no-ansi test -r --package //pub/examples)"
            poetry --no-ansi --no-interaction run sh -c "(cd examples && coverage run $(poetry run which pc) --no-ansi render -r --package //pub/examples)"
            poetry --no-ansi --no-interaction run coverage xml --data-file=examples/.coverage -o pc-test-results/coverage.xml

      - name: Upload test results & coverage reports to github and codecov
        if: always()
        uses: ./.github/actions/upload-test-results
        with:
          name: pc-test-results
          path: pc-test-results/
          retention-days: 7
          status: ${{ job.status }}
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov-files: pc-test-results/junit.xml
          coverage-report: pc-test-results/coverage.xml
