# CI on Linux, MacOS and Windows
name: CI # Keep the action badge icon short

on:
  workflow_dispatch:
  schedule:
    # https://crontab.guru/#0_8_*_*_*
    # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule
    - cron: "0 18 * * *" # Run daily at Pacific time morning
  merge_group:
  push:
    branches: ["main", "devel"]
  pull_request:
    branches: ["main", "devel"]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # If this is the original copy of PartCAD, then use the org's self-hosted runners
  OSES: '["ubuntu-latest", "windows-latest", "macos-13", "macos-latest"]'
  # OSES: ${{ github.repository == 'partcad/partcad' && '["ubuntu-latest", "windows-latest", "macos-13", "macos-latest", ["self-hosted", "macos-15-large"]]' || '["ubuntu-latest", "windows-latest", "macos-15-large", "macos-15-xlarge"]' }}
  PYTHONS: '["3.10", "3.11", "3.12"]'
  # PYTHONS: ${{ github.ref == 'refs/heads/devel' && '["3.10", "3.11", "3.12"]' || '["3.10", "3.12"]' }}
  # OSPY: >-
  #   ${{
  #     github.repository == 'partcad/partcad'
  #     &&
  #     '[
  #       ["ubuntu-latest", "3.10"],
  #       ["ubuntu-latest", "3.11"],
  #       ["ubuntu-latest", "3.12"],
  #       ["windows-latest", "3.10"],
  #       ["windows-latest", "3.11"],
  #       ["windows-latest", "3.12"],
  #       ["macos-13", "3.10"],
  #       ["macos-13", "3.11"],
  #       ["macos-13", "3.12"],
  #       ["macos-latest", "3.10"],
  #       ["macos-latest", "3.11"],
  #       ["macos-latest", "3.12"],
  #       [["self-hosted", "macos-15-large"], "3.10"],
  #       [["self-hosted", "macos-15-xlarge"], "3.12"]
  #     ]'
  #     ||
  #     '[
  #       ["ubuntu-latest", "3.10"],
  #       ["ubuntu-latest", "3.11"],
  #       ["ubuntu-latest", "3.12"],
  #       ["windows-latest", "3.10"],
  #       ["windows-latest", "3.11"],
  #       ["windows-latest", "3.12"],
  #       ["macos-15-large", "3.10"],
  #       ["macos-15-large", "3.11"],
  #       ["macos-15-large", "3.12"],
  #       ["macos-15-xlarge", "3.10"],
  #       ["macos-15-xlarge", "3.11"],
  #       ["macos-15-xlarge", "3.12"]
  #     ]'
  #   }}

jobs:
  set-matrix:
    name: "Set matrix"
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/devel' || startsWith(github.event.head_commit.message, 'Version updated') }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          echo 'matrix={"os": ${{ env.OSES }}, "python-version": ${{ env.PYTHONS }}, "exclude": [{"os": "windows-latest", "python-version": "3.12"}]}' >> $GITHUB_OUTPUT
          # echo 'matrix={"ospy": ${{ env.OSPY }} }' >> $GITHUB_OUTPUT

  cache-preheat:
    name: "Update caches"
    needs: set-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-all
        with:
          job: cache-preheat
          preheat_only: "true"

  test-pytest:
    name: "Pytest"
    needs: cache-preheat
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-all
        with:
          job: pytest
      - uses: ./.github/actions/setup-test
        with:
          job: pytest

      - name: Test with pytest
        # env:
        #   PYTHONWARNINGS: ignore
        shell: bash -el {0}
        run: |
          . ~/.bashrc
          . ~/.bash_profile
          mamba activate ${{ format('env-test-pytest-{0}', matrix.python-version) }}

          mkdir -pv pytest-test-results
          pytest \
            partcad partcad-cli \
            -x -p no:error-for-skips -p no:warnings --dist no
          coverage xml --rcfile=./dev-tools/coverage.rc --data-file=.coverage -o ./pytest-test-results/coverage.xml
          mamba deactivate

      - name: Upload test results & coverage reports to github and codecov
        uses: ./.github/actions/upload-test-results
        with:
          name: pytest-test-results-${{matrix.os}}-${{matrix.python-version}}
          path: pytest-test-results/
          retention-days: 7
          status: ${{ job.status }}
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov-files: pytest-test-results/junit.xml
          coverage-report: pytest-test-results/coverage.xml

  test-pytest-ide-vscode:
    name: "Pytest (VS Code extension)"
    needs: cache-preheat
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-all
        with:
          job: pytest-ide-vscode
      - uses: ./.github/actions/setup-test
        with:
          job: pytest-ide-vscode

      # TODO(clairbee): Move this step to the build jobs. Merge build.yml and test.yml to form a ci.yml, where this test job may 'needs' that build job
      - name: Build the VS Code extension
        shell: bash -el {0}
        run: |
          . ~/.bashrc
          . ~/.bash_profile
          mamba activate ${{ format('env-test-pytest-ide-vscode-{0}', matrix.python-version) }}
          (cd partcad-ide-vscode && nox --session setup && nox --session build_package)
          mamba deactivate

      - name: Test VS Code extension with pytest
        env:
          PYTHONWARNINGS: ignore
        shell: bash -el {0}
        run: |
          . ~/.bashrc
          . ~/.bash_profile
          mamba activate ${{ format('env-test-pytest-ide-vscode-{0}', matrix.python-version) }}

          mkdir -pv pytest-vscode-test-results
          pytest \
            partcad-ide-vscode \
            -x -p no:error-for-skips -p no:warnings --dist no
          coverage xml --rcfile=./dev-tools/coverage.rc --data-file=.coverage -o ./pytest-vscode-test-results/coverage.xml
          mamba deactivate

      - name: Upload test results & coverage reports to github and codecov
        uses: ./.github/actions/upload-test-results
        with:
          name: pytest-vscode-test-results-${{matrix.os}}-${{matrix.python-version}}
          path: pytest-vscode-test-results/
          retention-days: 7
          status: ${{ job.status }}
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov-files: pytest-vscode-test-results/junit.xml
          coverage-report: pytest-vscode-test-results/coverage.xml

  test-behave:
    name: "Behave"
    needs: cache-preheat
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-all
        with:
          job: behave
      - uses: ./.github/actions/setup-test
        with:
          job: behave

      # For Windows only, use PowerShell to set the SSH agent service in the manual launch mode
      - name: Set SSH Agent Service to Manual
        if: runner.os == 'Windows'
        run: Set-Service -Name ssh-agent -StartupType Manual
        shell: pwsh

      - name: Start SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_RO }}

      - name: Test with behave
        shell: bash -el {0}
        run: |
          . ~/.bashrc
          . ~/.bash_profile
          mkdir -pv behave-test-results

          mamba activate ${{ format('env-test-behave-{0}', matrix.python-version) }}
          if ! python -m pip install -U ./partcad ./partcad-cli; then
            echo "Failed to install packages"
            exit 1
          fi

          export PYTHONUTF8=1
          export PYTHONIOENCODING=utf-8

          BEHAVE_CMD="coverage run --rcfile=./dev-tools/coverage.rc --data-file=.coverage -m behavex"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            BEHAVE_CMD="$BEHAVE_CMD --tags=-skip-windows"
          fi

          if ! eval "$BEHAVE_CMD"; then
            echo "Behave tests failed"
            exit 1
          fi

          # if ! coverage run --rcfile=./dev-tools/coverage.rc --data-file=.coverage -m behavex; then
          #   echo "Behave tests failed"
          #   exit 1
          # fi

          coverage combine
          coverage xml --rcfile=./dev-tools/coverage.rc --data-file=.coverage -o ./behave-test-results/coverage.xml
          mamba deactivate

      - name: Upload test results & coverage reports to github and codecov
        uses: ./.github/actions/upload-test-results
        with:
          name: behave-test-results-${{matrix.os}}-${{matrix.python-version}}
          path: behave-test-results/
          retention-days: 7
          status: ${{ job.status }}
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov-files: behave-test-results/junit.xml
          coverage-report: behave-test-results/coverage.xml

  # test-examples-partcad:
  #   name: "Examples (PartCAD)"
  #   needs: cache-preheat
  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
  #   runs-on: ${{ matrix.os }}
  #   if: ${{ !startsWith(github.event.head_commit.message, 'Version updated') }}
  #   timeout-minutes: 15

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./.github/actions/setup-all
  #       with:
  #         job: examples-partcad
  #     - uses: ./.github/actions/setup-test
  #       with:
  #         job: examples-partcad

  #     - name: Basic integration test for CLI (PartCAD examples)
  #       shell: bash -el {0}
  #       env:
  #         PC_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  #       run: |
  #         mkdir -pv examples-partcad-test-results

  #         mamba activate ${{ format('env-test-examples-partcad-{0}', matrix.python-version) }}
  #         python -m pip install -U ./partcad ./partcad-cli

  #         # BEGIN PARTCAD EXAMPLES
  #         cd ./examples
  #         coverage run --rcfile=../dev-tools/coverage.rc --data-file=.coverage.1 -m partcad_cli.click.command --no-ansi list all -r
  #         # TODO(clairbee): Limit RAM usage by restricting the number of threads?
  #         coverage run --rcfile=../dev-tools/coverage.rc --data-file=.coverage.2 -m partcad_cli.click.command --no-ansi -v --threads-max 2 test -r --package //pub/examples/partcad
  #         coverage run --rcfile=../dev-tools/coverage.rc --data-file=.coverage.3 -m partcad_cli.click.command --no-ansi -v --threads-max 2 render -r --package //pub/examples/partcad
  #         coverage combine || true
  #         # END PARTCAD EXAMPLES

  #         coverage xml --rcfile=../dev-tools/coverage.rc --data-file=.coverage -o ../examples-partcad-test-results/coverage.xml || true
  #         mamba deactivate

  #     - name: Upload test results & coverage reports to github and codecov
  #       uses: ./.github/actions/upload-test-results
  #       with:
  #         name: examples-partcad-test-results-${{matrix.os}}-${{matrix.python-version}}
  #         path: examples-partcad-test-results/
  #         retention-days: 7
  #         status: ${{ job.status }}
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         codecov-files: examples-partcad-test-results/junit.xml
  #         coverage-report: examples-partcad-test-results/coverage.xml

  test-examples-all:
    name: "Examples (All)"
    needs: cache-preheat
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-all
        with:
          job: examples-all
      - uses: ./.github/actions/setup-test
        with:
          job: examples-all

      - name: Basic integration test for CLI (all examples)
        shell: bash -el {0}
        run: |
          . ~/.bashrc
          . ~/.bash_profile
          mkdir -pv examples-all-test-results

          mamba activate ${{ format('env-test-examples-all-{0}', matrix.python-version) }}
          python -m pip install -U ./partcad ./partcad-cli

          # BEGIN ALL EXAMPLES
          cd ./examples
          # TODO(clairbee): Limit RAM usage by restricting the number of threads?
          coverage run --rcfile=../dev-tools/coverage.rc --data-file=.coverage.1 -m partcad_cli.click.command --no-ansi list all -r //pub/examples
          coverage run --rcfile=../dev-tools/coverage.rc --data-file=.coverage.2 -m partcad_cli.click.command --no-ansi test -r --package //pub/examples
          coverage combine
          # END ALL EXAMPLES

          coverage xml --rcfile=../dev-tools/coverage.rc --data-file=.coverage -o ../examples-all-test-results/coverage.xml
          mamba deactivate

      - name: Upload test results & coverage reports to github and codecov
        uses: ./.github/actions/upload-test-results
        with:
          name: examples-all-test-results-${{matrix.os}}-${{matrix.python-version}}
          path: examples-all-test-results/
          retention-days: 7
          status: ${{ job.status }}
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov-files: examples-all-test-results/junit.xml
          coverage-report: examples-all-test-results/coverage.xml

  test-pub-repo:
    name: "Repo //pub"
    # Note: preheat is using another set of machines
    needs: cache-preheat
    strategy:
      fail-fast: false
      matrix:
        # TODO(clairbee): Move this to the environment variables too
        os: [ubuntu-24.04-l, windows-latest-l, macos-13, macos-latest]
        python-version: ["3.10", "3.12"]
    runs-on: ${{ matrix.os }}
    if: ${{ github.ref != 'refs/heads/devel' || startsWith(github.event.head_commit.message, 'Version updated') }}
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-all
        with:
          job: pub-repo
      - uses: ./.github/actions/setup-test
        with:
          job: pub-repo

      - name: Test the entire repository
        shell: bash -el {0}
        run: |
          . ~/.bashrc
          . ~/.bash_profile
          mkdir -pv pub-repo-test-results

          mamba activate ${{ format('env-test-pub-repo-{0}', matrix.python-version) }}
          python -m pip install -U ./partcad ./partcad-cli

          # BEGIN PUBLIC REPO
          cd examples
          coverage run --rcfile=../dev-tools/coverage.rc --data-file=.coverage -m partcad_cli.click.command --no-ansi list all -r //pub
          # TODO(clairbee): fix the failing packages first
          # coverage run --rcfile=../dev-tools/coverage.rc -m partcad_cli.click.command --no-ansi --threads-max=4 test -r --package //pub
          # END PUBLIC REPO
          coverage combine

          coverage xml --rcfile=../dev-tools/coverage.rc --data-file=.coverage -o ../pub-repo-test-results/coverage.xml
          mamba deactivate

      - name: Upload test results & coverage reports to github and codecov
        uses: ./.github/actions/upload-test-results
        with:
          name: pub-repo-test-results-${{matrix.os}}-${{matrix.python-version}}
          path: pub-repo-test-results/
          retention-days: 7
          status: ${{ job.status }}
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov-files: pub-repo-test-results/junit.xml
          coverage-report: pub-repo-test-results/coverage.xml
