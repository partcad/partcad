{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>PartCAD is the first package manager for CAD models and a framework for managing assemblies.</p> <p>It aims to complement Git with everything necessary for hardware development to substitute commercial Product Lifecycle Management (PLM) tools.</p> <p>It's a free versioning and change management solution for all your CAD needs, built around your CAD artifacts instead of being built into your CAD tool:</p> <ul> <li> Browse documentation.</li> <li> Visit website.</li> <li> Watch our demos.</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/01/03/partcad-has-new-home/","title":"PartCAD has new home!","text":"<p>PartCAD has new home! If you happen to visit San Jose and you want to chat in person about taking ownership over engineering and manufacturing data, how to design for manufacturing, then stop by our new office at 99 S Almaden Blvd, San Jose, CA 95113.</p> <p></p>","tags":["Office"]},{"location":"development/environment/","title":"Environment","text":"<p>Our team is using  Visual Studio Code and  Docker which boosts software development by providing a powerful, customizable editor and ensuring consistent environments with containerization.</p> <p>VS Code's rich extensions and debugging tools integrate seamlessly with Docker, allowing developers to write, test, and debug code within containers.</p> <p>This setup eliminates environment inconsistencies, accelerates development, and improves team collaboration.</p>","tags":["Development","Explanation"]},{"location":"development/environment/#docker","title":"Docker","text":"<p>Docker helps build, share, run, and verify applications anywhere \u2014 without tedious environment configuration or management. There are two main options how to setup Docker.</p> <p>If you do not have previous experience with Docker, then here is good place to start:</p> <ul> <li>Docker Docs - Get Started</li> </ul>","tags":["Development","Explanation"]},{"location":"development/environment/#engine","title":"Engine","text":"<p>If your primary development system is Linux then you can install Docker daemon directly on your host, see Install for more details on how to install it in distributution you're using.</p> <p>Quote</p> <p>Docker Engine is an open source containerization technology for building and containerizing your applications. Docker Engine acts as a client-server application with:</p> <ul> <li>A server with a long-running daemon process dockerd.</li> <li>APIs which specify interfaces that programs can use to talk to and instruct the Docker daemon.</li> <li>A command line interface (CLI) client docker.</li> </ul> <p>The CLI uses Docker APIs to control or interact with the Docker daemon through scripting or direct CLI commands. Many other Docker applications use the underlying API and CLI. The daemon creates and manages Docker objects, such as images, containers, networks, and volumes.</p> <p>For more details, see Docker Architecture.</p>","tags":["Development","Explanation"]},{"location":"development/environment/#desktop","title":"Desktop","text":"<p>If you working in macOS or Windows, you still can install Engine, but that would require managing local Linux VM. Docker Desktop provides convenient solution and handles required virtualization for you:</p> <ul> <li>Install on Mac</li> <li>Install on Windows</li> </ul> <p>Quote</p> <p>Docker Desktop is a one-click-install application for your Mac, Linux, or Windows environment that lets you build, share, and run containerized applications and microservices.</p> <p></p>","tags":["Development","Explanation"]},{"location":"development/environment/#visual-studio-code","title":"Visual Studio Code","text":"<p>VS Code available for macOS, Linux, and Windows, has extensible architecture and has rich customization and integration options. Here is good place to get familiar with it:</p> <ul> <li>Setting up Visual Studio Code</li> </ul> <p>Quote</p> <p>Visual Studio Code combines the simplicity of a source code editor with powerful developer tooling, like IntelliSense code completion and debugging.</p> <p>First and foremost, it is an editor that gets out of your way. The delightfully frictionless edit-build-debug cycle means less time fiddling with your environment, and more time executing on your ideas.</p> <p></p>","tags":["Development","Explanation"]},{"location":"development/environment/#dev-containers","title":"Dev Containers","text":"<p>VS Code also provides seamless integration with Docker for managing environments by supporting Dev Containers specification.</p> <p>Quote</p> <p>The Visual Studio Code Dev Containers extension lets you use a container as a full-featured development environment. It allows you to open any folder inside (or mounted into) a container and take advantage of Visual Studio Code's full feature set. A devcontainer.json file in your project tells VS Code how to access (or create) a development container with a well-defined tool and runtime stack. This container can be used to run an application or to separate tools, libraries, or runtimes needed for working with a codebase.</p> <p>Following docs section provides good overview of available features:</p> <ul> <li>Developing inside a Container</li> </ul>","tags":["Development","Explanation"]},{"location":"development/quick-start/","title":"Quick Start","text":"<p>Info</p> <p>Following tutorial assumes that you have previous experience with both VS Code and Docker or have read Environment first.</p> <p>Overall process starting from setting up environment till merging changes in default branch is the following:</p> <ol> <li>Clone Git Repository.</li> <li>Install Python Dependencies.</li> <li>Activate Virtual Environment.</li> <li>Make Changes in Source Files.</li> <li>Run Tests.</li> <li>Commit &amp; Push Changes.</li> <li>Open Pull Request.</li> <li>Meet PR Merge Criteria.</li> </ol>","tags":["Tutorials"]},{"location":"development/quick-start/#clone-git-repository","title":"Clone Git Repository","text":"<p>Due to differences in Docker setup on Linux vs other system this step has different best practicies. Please follow section for your OS below, and once you have cloned repository VS Code will start Dev Container.</p> <p>Current size of base Docker Image with all system level dependencies baked-in is 2.83 GB, main highlights are:</p> <ul> <li>Debian Bookwork: 116.56 Mb</li> <li>Common Utils: 251.11 Mb</li> <li>Git: 423.87 Mb</li> <li>APT Packages: 770.56 Mb</li> <li>Python: 411.28 Mb</li> </ul>","tags":["Tutorials"]},{"location":"development/quick-start/#mac-windows","title":"Mac &amp; Windows","text":"<p>Warning</p> <p>Since macOS and Windows run containers in a VM, \"bind\" mounts are not as fast as using the container's filesystem directly. Fortunately, Docker has the concept of a local \"named volume\" that can act like the container's filesystem but survives container rebuilds. This makes it ideal for storing package folders like <code>node_modules</code>, data folders, or output folders like <code>build</code> where write performance is critical.</p> <p>In order to have optimal performance use the following documentation, but when prompted to provide GitHub repository name use <code>partcad/partcad</code> to clone our main repository:</p> <ul> <li>Quick start: Open a Git repository or GitHub PR in an isolated container volume</li> </ul>","tags":["Tutorials"]},{"location":"development/quick-start/#linux","title":"Linux","text":"<p>Since Linux can run Docker Engine directly on your host system, you can use the following documentation to bootstrap environment.</p> <ul> <li>Quick start: Open an existing folder in a container</li> </ul>","tags":["Tutorials"]},{"location":"development/quick-start/#install-dependencies","title":"Install Dependencies","text":"<p>We are using Poetry to manage dependencies and virtual environments.</p> <p>Info</p> <p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you. Poetry offers a lockfile to ensure repeatable installs, and can build your project for distribution.</p> <p>Once Dev Container is started you will be able to open terminal, with current working directory at <code>/workspaces/partcad</code> containing source files. In order to install Python packages you have to run the following:</p> <pre><code>$ poetry install\n</code></pre> <p>It will create virtual environment in <code>.venv/</code> directory and download about 1.6G dependencies. Once all dependencies are downloaded Poetry will also install current package in editable mode, and you will see the following:</p> <pre><code>Installing the current project: partcad-dev (0.1.0)\n</code></pre>","tags":["Tutorials"]},{"location":"development/quick-start/#activate-environment","title":"Activate Environment","text":"<p>In order to update your <code>$PATH</code> and be able to run commandline tools such as <code>pytest</code> you need to activate virtual environment:</p> <pre><code>poetry shell\n</code></pre> <p>After that you will be able to run <code>pc</code>, for example <code>pc version</code>, which will output something along the lines:</p> <pre><code>INFO:  PartCAD Python Module version: 0.7.40\nINFO:  PartCAD CLI version: 0.7.40\n</code></pre>","tags":["Tutorials"]},{"location":"development/quick-start/#make-changes","title":"Make Changes","text":"<p>Make necessary updates, for example in current Quick Start editing <code>docs/mkdocs/docs/development/quick-start.md</code></p>","tags":["Tutorials"]},{"location":"development/quick-start/#run-tests","title":"Run Tests","text":"<p>We are using both Unit and Functional testing with main tools being pytest &amp; Behave:</p> <p>Quote</p> <p>The <code>pytest</code> framework makes it easy to write small, readable tests, and can scale to support complex functional testing for applications and libraries.</p> <p>Quote</p> <p><code>behave</code> uses tests written in a natural language style, backed up by Python code.</p>","tags":["Tutorials"]},{"location":"development/quick-start/#pytest","title":"pytest","text":"<p>If you activated virtual environment you can just run <code>pytest</code> from terminal.</p> <p>You also can use built-in Testing integration to be able to run and debug tests via VS Code UI, but for that you will have to select correct Python Interpreter first by running <code>Python: Select Interpreter</code> from Command Palette and point it to <code>('.venv': Poetry) .venv/bin/python</code>.</p> <p>You also can run <code>pytest</code> without activating environment via Poetry, for example:</p> <pre><code>$ poetry run pytest\n</code></pre>","tags":["Tutorials"]},{"location":"development/quick-start/#behave","title":"Behave","text":"","tags":["Tutorials"]},{"location":"development/quick-start/#commit-push-changes","title":"Commit &amp; Push Changes","text":"<p>You can commit changes from either terminal or VS Code UI which will trigger local git hooks managed by <code>pre-commit</code> to enforce coding standards and catch some of the problems early.</p>","tags":["Tutorials"]},{"location":"development/quick-start/#pre-commit","title":"pre-commit","text":"<p>Quote</p> <p>pre-commit is a framework for managing and maintaining multi-language pre-commit hooks.</p> <p>Configuration file is located at <code>.devcontainer/.pre-commit-config.yaml</code> were you can see all supported hooks.</p> <p>Info</p> <p>In rare cases you might have to temporarily disable hooks but remember this they also run in CI and required to pass before PR could be merged. This will allow you to skip individual hooks.</p> <p>Another option is git commit --no-verify which will skip all hooks at once.</p>","tags":["Tutorials"]},{"location":"development/quick-start/#open-pull-request","title":"Open Pull Request","text":"<p>There are multiple options how PR could be opened, please refer to the following to choose option which works best for you.</p> <ul> <li>Creating a pull request</li> <li>GitHub Pull Requests in Visual Studio Code</li> </ul>","tags":["Tutorials"]},{"location":"development/quick-start/#meet-pr-merge-criteria","title":"Meet PR Merge Criteria","text":"<p>Depending on files changed in PR you might need to get required checks to pass first and get reviews from owners or maintainers, following are related GH docs:</p> <ul> <li>About Status Checks</li> <li>Required reviews</li> </ul>","tags":["Tutorials"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/partcad/","title":"PartCAD","text":""},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#development","title":"Development","text":"<ul> <li>Environment</li> </ul>"},{"location":"tags/#explanation","title":"Explanation","text":"<ul> <li>Environment</li> </ul>"},{"location":"tags/#office","title":"Office","text":"<ul> <li>PartCAD has new home!</li> </ul>"},{"location":"tags/#tutorials","title":"Tutorials","text":"<ul> <li>Quick Start</li> </ul>"}]}