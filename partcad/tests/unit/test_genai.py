from unittest.mock import MagicMock, patch

import partcad as pc
from partcad.part_factory_ai_cadquery import PartFactoryAiCadquery
from partcad.part_factory_ai_openscad import PartFactoryAiScad


def check_python_syntax(python_code):
    try:
        compile(python_code, "<string>", "exec")
        return True
    except SyntaxError as e:
        print(f"Syntax error detected:\n{e}")
        return False


def test_scad_ai_script_header():
    ctx = pc.Context("examples")
    prj = ctx.get_project("//")
    config = {"name": "test", "desc": "test", "type": "scad", "provider": "openai", "orig_name": "test"}
    part_factory = PartFactoryAiScad(ctx, prj, prj, config)
    assert part_factory is not None

    part_factory.model = "gpt-4o"
    script = """cube([10, 10, 10]);"""
    with patch(
        "partcad.part_factory_feature_ai.Git", return_value=MagicMock(config=MagicMock(return_value="Mock Author"))
    ):
        updated_script = part_factory._add_header(script)

    assert "OpenSCAD script File Generated by AI" in updated_script
    assert "Mock Author" in updated_script


def test_cadquery_ai_script_header():
    ctx = pc.Context("examples")
    prj = ctx.get_project("//")
    config = {"name": "test", "desc": "test", "type": "cadquery", "provider": "openai", "orig_name": "test"}
    part_factory = PartFactoryAiCadquery(ctx, prj, prj, config)
    assert part_factory is not None

    part_factory.model = "gpt-4o"
    script = """
def make_part():
    return cq.Workplane("XY").box(10, 10, 10)
"""
    with patch(
        "partcad.part_factory_feature_ai.Git", return_value=MagicMock(config=MagicMock(return_value="Mock Author"))
    ):
        updated_script = part_factory._add_header(script)

    assert check_python_syntax(updated_script)
    assert "CadQuery 2.0 script File Generated by AI" in updated_script
    assert "Mock Author" in updated_script
